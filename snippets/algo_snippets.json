{
    "IsPrime": {
        "prefix": "algo-is_prime",
        "body": [
            "def is_prime(n: int) -> bool:",
            "\t\"\"\"",
            "\tReturn True if n is prime, False otherwise.",
            "\t\"\"\"",
            "\tif n < 2:",
            "\t\treturn False",
            "\telif n < 4:",
            "\t\treturn True",
            "\telif n % 2 == 0 or n % 3 == 0:",
            "\t\treturn False",
            "\telse:",
            "\t\tfor i in range(5, int(n**0.5)+1, 6):",
            "\t\t\tif n % i == 0 or n % (i+2) == 0:",
            "\t\t\t\treturn False",
            "\t\treturn True"
        ],
        "description": "check whether a number is prime"
    },
    "BinaryExponentiation": {
        "prefix": [
            "algo-binaryExponentiation",
            "algo-fast_power",
            "algo-fast_expo"
        ],
        "body": [
            "def fast_power(x: float, y: int) -> int:\n",
            "\t\"\"\"\n",
            "\tReturn x^y with O(log(n)) Time Complexity.\n",
            "\t\"\"\"\n",
            "\tif y == 0:\n",
            "\t\treturn 1\n",
            "\telif y == 1:\n",
            "\t\treturn x\n",
            "\telif y == -1:\n",
            "\t\treturn 1/x\n",
            "\telse:\n",
            "\t\tans = fast_power(x, y//2)\n",
            "\t\tif y % 2 == 0:\n",
            "\t\t\treturn ans*ans\n",
            "\t\telse:\n",
            "\t\t\treturn ans * ans * x\n"
        ],
        "description":"peforms a^b operation with O(log(n)) Complexity"
    }
}